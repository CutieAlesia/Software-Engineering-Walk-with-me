// Generated by view binder compiler. Do not edit!
package com.walkwithme.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ListView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.walkwithme.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentProfileBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView AvatarField;

  @NonNull
  public final EditText PreferencesField;

  @NonNull
  public final EditText UserInfoField;

  @NonNull
  public final EditText UserNameField;

  @NonNull
  public final Button chat;

  @NonNull
  public final ListView previewList;

  @NonNull
  public final Button remove;

  @NonNull
  public final Button save;

  private FragmentProfileBinding(@NonNull ConstraintLayout rootView, @NonNull ImageView AvatarField,
      @NonNull EditText PreferencesField, @NonNull EditText UserInfoField,
      @NonNull EditText UserNameField, @NonNull Button chat, @NonNull ListView previewList,
      @NonNull Button remove, @NonNull Button save) {
    this.rootView = rootView;
    this.AvatarField = AvatarField;
    this.PreferencesField = PreferencesField;
    this.UserInfoField = UserInfoField;
    this.UserNameField = UserNameField;
    this.chat = chat;
    this.previewList = previewList;
    this.remove = remove;
    this.save = save;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentProfileBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentProfileBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_profile, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentProfileBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.AvatarField;
      ImageView AvatarField = ViewBindings.findChildViewById(rootView, id);
      if (AvatarField == null) {
        break missingId;
      }

      id = R.id.PreferencesField;
      EditText PreferencesField = ViewBindings.findChildViewById(rootView, id);
      if (PreferencesField == null) {
        break missingId;
      }

      id = R.id.UserInfoField;
      EditText UserInfoField = ViewBindings.findChildViewById(rootView, id);
      if (UserInfoField == null) {
        break missingId;
      }

      id = R.id.UserNameField;
      EditText UserNameField = ViewBindings.findChildViewById(rootView, id);
      if (UserNameField == null) {
        break missingId;
      }

      id = R.id.chat;
      Button chat = ViewBindings.findChildViewById(rootView, id);
      if (chat == null) {
        break missingId;
      }

      id = R.id.previewList;
      ListView previewList = ViewBindings.findChildViewById(rootView, id);
      if (previewList == null) {
        break missingId;
      }

      id = R.id.remove;
      Button remove = ViewBindings.findChildViewById(rootView, id);
      if (remove == null) {
        break missingId;
      }

      id = R.id.save;
      Button save = ViewBindings.findChildViewById(rootView, id);
      if (save == null) {
        break missingId;
      }

      return new FragmentProfileBinding((ConstraintLayout) rootView, AvatarField, PreferencesField,
          UserInfoField, UserNameField, chat, previewList, remove, save);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
